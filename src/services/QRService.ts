/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 NEM
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import * as CryptoJS from "crypto-js";
import * as nemSdk from "nem-sdk";
import { Address } from "../models/account/Address";
import { XEM } from "../models/mosaic/XEM";
import { NetworkTypes } from "../models/node/NetworkTypes";
import { PlainMessage } from "../models/transaction/PlainMessage";
import { TransferTransaction, TxType } from "../models/transaction/TransferTransaction";
import { Password } from "../models/wallet/Password";
import { Wallet } from "../models/wallet/Wallet";
import get_random_values = require("get-random-values");

export interface QRWalletText {
  type: number;
  v: number;
  data: {
    name: string,
    priv_key: string,
    salt: string,
  };
}

export interface QRAddressText {
  type: number;
  v: number;
  data: {
    addr: string,
    name: string,
  };
}

export interface QRTransactionText {
  type: number;
  v: number;
  data: {
    addr: string,
    amount: number,
    msg: string,
  };
}

export class QRService {

  /**
   * Generates the QR text from the wallet
   * @returns {string}
   */
  public generateWalletQRText(password: Password, wallet: Wallet): string {
    // Decrypt/generate private key and check it. Returned private key is contained into this.common
    const privateKey = wallet.unlockPrivateKey(password);

    const mobileKeys = this.AES_PBKF2_encryption(password, privateKey);

    const QR = {
      v: wallet.network == NetworkTypes.TEST_NET ? 1 : 2,
      type: 3,
      data: {
        name: wallet.name,
        priv_key: mobileKeys.encrypted,
        salt: mobileKeys.salt,
      },
    };

    return JSON.stringify(QR);
  }

  /**
   * Decrypt the private key from the QR text
   * @param password password
   * @param qrWalletText Object generated by generateWalletQRText method
   * @return Decrypted private key
   */
  public decryptWalletQRText(password: Password, qrWalletText: QRWalletText): string {
    const encryptedData = qrWalletText.data;
    const salt = CryptoJS.enc.Hex.parse(encryptedData.salt);
    const encrypted = encryptedData.priv_key;

    //generate key
    const key = CryptoJS.PBKDF2(password.value, salt, {
      keySize: 256 / 32,
      iterations: 2000,
    }).toString();

    //separated from priv_key iv and cipherdata
    const iv = encrypted.substring(0, 32);
    const encryptedPrvKey = encrypted.substring(32, 128);

    //separated  vh from priv_key iv and cipherdata
    const obj = {
      ciphertext: CryptoJS.enc.Hex.parse(encryptedPrvKey),
      iv: nemSdk.default.utils.convert.hex2ua(iv),
      key: nemSdk.default.utils.convert.hex2ua(key.toString()),
    };
    const decrypt = nemSdk.default.crypto.helpers.decrypt(obj);
    if (decrypt === "" || (decrypt.length != 64 && decrypt.length != 66)) throw new Error("invalid password");
    return decrypt;
  }

  /**
   * Generates the QR text from an address
   * @returns {string}
   */
  public generateAddressQRText(address: Address): string {
    const QR = {
      v: address.network() == NetworkTypes.TEST_NET ? 1 : 2,
      type: 1,
      data: {
        addr: address.plain(),
        name: "wallet",
      },
    } as QRAddressText;

    return JSON.stringify(QR);
  }

  /**
   * Decrypt the address from the QR text
   * @param qrAddressText Object generated by generateAddressQRText method
   * @return Address
   */
  public decryptAddressQRText(qrAddressText: QRAddressText): Address {
    return new Address(qrAddressText.data.addr);
  }

  /**
   * Generates the QR text from a transaction
   * @returns {string}
   */
  public generateTransactionQRText(recipientAddress: Address, amount: number, msg: string): string {
    const QR = {
      v: recipientAddress.network() == NetworkTypes.TEST_NET ? 1 : 2,
      type: 2,
      data: {
        addr: recipientAddress.plain(),
        amount: amount,
        msg: msg,
      },
    } as QRTransactionText;

    return JSON.stringify(QR);
  }

  /**
   * Decrypt the transaction from the QR text
   * @param qrTransactionText Object generated by generateTransactionQRText method
   * @return TransferTransaction
   */
  public decryptTrasactionQRText(qrTransactionText: QRTransactionText): TransferTransaction {
    return TransferTransaction.create(
      new Address(qrTransactionText.data.addr),
      TxType.xem,
      new XEM(qrTransactionText.data.amount),
      PlainMessage.create(qrTransactionText.data.msg),
    );
  }

  /**
   * @internal
   * @param password
   * @param privateKey
   */
  private AES_PBKF2_encryption(password: Password, privateKey: string) {
    const salt = CryptoJS.lib.WordArray.random(256 / 8);
    const key = CryptoJS.PBKDF2(password.value, salt, {
      keySize: 256 / 32,
      iterations: 2000,
    });
    const iv = new Uint8Array(16);
    get_random_values(iv);
    const encIv = {
      iv: nemSdk.default.utils.convert.ua2words(iv, 16),
    };
    const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(privateKey), key, encIv);
    return {
      encrypted: nemSdk.default.utils.convert.ua2hex(iv) + encrypted.ciphertext,
      salt: salt.toString(),
    };
  }

}
